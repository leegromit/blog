<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Ubuntu图形化界面</title>
    <url>/2023/05/09/My-New-Post/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>在重新安装服务器显卡后进不去图形化界面，但是可以通过Xshell或MobaXterm远程连接，在卸载重装驱动后无果，之后慢慢找到了解决方案。如果进不去Ubuntu的图形化界面，但是可以通过远程连接或者进入recovery模式，希望以下解决方法可以帮到你。</p>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>首先删除lightdm：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get remove lightdm</span><br></pre></td></tr></table></figure></div>

<p>然后重新安装图形化界面</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install ubuntu-desktop</span><br><span class="line">sudo apt-get install unity</span><br><span class="line">sudo apt-get install lightdm</span><br></pre></td></tr></table></figure></div>
<p> install lightdm之后会进入一个选择界面，选择lightdm或者gdm3，我这里选择了gdm3，然后</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo service gmd3 start</span><br></pre></td></tr></table></figure></div>
<p>这里报错<code>Failed to start gmd3.service: Unit gmd3.service not found.</code></p>
<p>输入下面命令后选择gdm3</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo dpkg-reconfigure gdm3</span><br></pre></td></tr></table></figure></div>

<p>再更改默认开启方式</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo systemctl set-defalut graphical.target</span><br></pre></td></tr></table></figure></div>
<p>这里我报错了<code>Unknown operation set-defalut.</code>但好像最后没什么影响</p>
<p>最后reboot重启，大功告成。</p>
<p>如果使用命令apt-get install xxx 安装软件时报“<a class="link" href="http://cn.archive.ubuntu.com/ubuntu">http://cn.archive.ubuntu.com/ubuntu <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> xxx“连接失败的错误，就需要修改系统默认源source.list文件（&#x2F;etc&#x2F;apt&#x2F;sources.list）。</p>
<p>修改读写权限</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chmod</span> 666 /etc/apt/sources.list</span><br></pre></td></tr></table></figure></div>
<p>进入镜像文件 </p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/apt/sources.list</span><br></pre></td></tr></table></figure></div>
<p>把 <a class="link" href="http://cn.archive.ubuntu.com/ubuntu">http://cn.archive.ubuntu.com/ubuntu <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 地址全部替换为可用的镜像，这里使用的阿里云： <a class="link" href="http://mirrors.aliyun.com/ubuntu">http://mirrors.aliyun.com/ubuntu <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>像下面这样，示例：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># See http://help.ubuntu.com/community/UpgradeNotes for how to upgrade to</span></span><br><span class="line"><span class="comment"># newer versions of the distribution.</span></span><br><span class="line"><span class="comment"># deb http://cn.archive.ubuntu.com/ubuntu/ focal main restricted</span></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal main restricted</span><br><span class="line"><span class="comment"># deb-src http://cn.archive.ubuntu.com/ubuntu/ focal main restricted</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## Major bug fix updates produced after the final release of the</span></span><br><span class="line"><span class="comment">## distribution.</span></span><br><span class="line"><span class="comment"># deb http://cn.archive.ubuntu.com/ubuntu/ focal-updates main restricted</span></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal-updates main restricted</span><br><span class="line"><span class="comment"># deb-src http://cn.archive.ubuntu.com/ubuntu/ focal-updates main restricted</span></span><br></pre></td></tr></table></figure></div>
<p>ESC后输入 ：wq!  退出vim </p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure></div>

<p>最后reboot重启。</p>
<p>（可能大家遇到的问题都不太一样，希望能给予一定帮助）</p>
]]></content>
      <categories>
        <category>Q&amp;A</category>
      </categories>
      <tags>
        <tag>问题及解决方案</tag>
      </tags>
  </entry>
  <entry>
    <title>Gitalk评论插件踩坑指南</title>
    <url>/2023/05/11/Gitalk%E8%AF%84%E8%AE%BA%E6%8F%92%E4%BB%B6%E8%B8%A9%E5%9D%91%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>使用GitHub Page搭建好静态网页博客之后，开始着手处理评论功能。我所使用的主题Redefine中包含了这几个评论插件的实现需要自己去安装完善，最后我选择了Gitalk。</p>
<img lazyload src="/images/loading.svg" data-src="/2023/05/11/Gitalk%E8%AF%84%E8%AE%BA%E6%8F%92%E4%BB%B6%E8%B8%A9%E5%9D%91%E6%8C%87%E5%8D%97/1.png" class title="评论插件">


<h2 id="Gitalk接入"><a href="#Gitalk接入" class="headerlink" title="Gitalk接入"></a>Gitalk接入</h2><h3 id="在-github-中创建评论仓库"><a href="#在-github-中创建评论仓库" class="headerlink" title="在 github 中创建评论仓库"></a>在 github 中创建评论仓库</h3><p>在 github 中创建一个公开项目，例如，创建了一个名为 hexo-comments 的公开项目，最后项目的访问地址为：<a class="link" href="https://github.com/yourusername/hexo-comments">https://github.com/yourusername/hexo-comments <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="注册GithubApplication"><a href="#注册GithubApplication" class="headerlink" title="注册GithubApplication"></a>注册GithubApplication</h3><p> GitHub Application，链接如下：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://github.com/settings/applications/new</span><br></pre></td></tr></table></figure></div>
<img lazyload src="/images/loading.svg" data-src="/2023/05/11/Gitalk%E8%AF%84%E8%AE%BA%E6%8F%92%E4%BB%B6%E8%B8%A9%E5%9D%91%E6%8C%87%E5%8D%97/2.png" class>
<p>你需要填写Application name，起一个应用名；填写Homepage URL，也就是你的博客地址；填写Authorization callback URL，也就是回调地址，通常为你的博客地址。填写完成后，点击绿色按钮注册即可。</p>
<p>配置好之后，点击Generate a new client secret生产新的密钥，Client ID和Client secret在后面config.toml 中配置时需要用到。</p>
<img lazyload src="/images/loading.svg" data-src="/2023/05/11/Gitalk%E8%AF%84%E8%AE%BA%E6%8F%92%E4%BB%B6%E8%B8%A9%E5%9D%91%E6%8C%87%E5%8D%97/3.png" class>

<p>如果想要修改配置内容，可以在 github 中点击「右上角图标」-&gt;「Settings」-&gt;「Developer settings」-&gt;「OAuth Apps」</p>
<h3 id="安装-gitalk"><a href="#安装-gitalk" class="headerlink" title="安装 gitalk"></a>安装 gitalk</h3><p>在你的的hexo项目中安装 gitalk，执行命令 </p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i --save gitalk</span><br></pre></td></tr></table></figure></div>
<h3 id="hexo-主题设置"><a href="#hexo-主题设置" class="headerlink" title="hexo 主题设置"></a>hexo 主题设置</h3><ol>
<li>在你的主题下的 _config.yml 文件中添加 gitalk 相关配置：<img lazyload src="/images/loading.svg" data-src="/2023/05/11/Gitalk%E8%AF%84%E8%AE%BA%E6%8F%92%E4%BB%B6%E8%B8%A9%E5%9D%91%E6%8C%87%E5%8D%97/4.png" class></li>
<li>将Gitalk引入到想添加评论的 html 或者 jsp 页面中。这里我的主题内置了，所以有需要的请自己百度啦 0.o</li>
</ol>
<h3 id="编译上传"><a href="#编译上传" class="headerlink" title="编译上传"></a>编译上传</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clen &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure></div>

<h2 id="踩坑"><a href="#踩坑" class="headerlink" title="踩坑"></a>踩坑</h2><p>我在做完以上操作之后，评论功能还是无法使用，提示“未找到相关的issue评论，请联系xxx初始化创建”</p>
<img lazyload src="/images/loading.svg" data-src="/2023/05/11/Gitalk%E8%AF%84%E8%AE%BA%E6%8F%92%E4%BB%B6%E8%B8%A9%E5%9D%91%E6%8C%87%E5%8D%97/5.png" class>
<h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>出现这种情况就说明没有给文章评论初始化，点击蓝色的Issues，进仓库手动建一个issue。</p>
<h3 id="最最最坑的地方来了"><a href="#最最最坑的地方来了" class="headerlink" title="最最最坑的地方来了"></a>最最最坑的地方来了</h3><p> 新建issue 的 label 必须和你在页面配置Gitalk使用的 id，举个例子：<br> <img lazyload src="/images/loading.svg" data-src="/2023/05/11/Gitalk%E8%AF%84%E8%AE%BA%E6%8F%92%E4%BB%B6%E8%B8%A9%E5%9D%91%E6%8C%87%E5%8D%97/6.png" class title="新建issue的label"><br> <img lazyload src="/images/loading.svg" data-src="/2023/05/11/Gitalk%E8%AF%84%E8%AE%BA%E6%8F%92%E4%BB%B6%E8%B8%A9%E5%9D%91%E6%8C%87%E5%8D%97/7.png" class title="Gitalk使用的id"></p>
<p><strong>这里一定要保持一致</strong></p>
<p>具体地可以打开F12看源代码来获得这个id，比如：</p>
<img lazyload src="/images/loading.svg" data-src="/2023/05/11/Gitalk%E8%AF%84%E8%AE%BA%E6%8F%92%E4%BB%B6%E8%B8%A9%E5%9D%91%E6%8C%87%E5%8D%97/8.png" class>

<p>然后再新建issue时保持一致即可</p>
<img lazyload src="/images/loading.svg" data-src="/2023/05/11/Gitalk%E8%AF%84%E8%AE%BA%E6%8F%92%E4%BB%B6%E8%B8%A9%E5%9D%91%E6%8C%87%E5%8D%97/9.png" class title="新建issue保持一致">

<p><strong>这里的Gitalk是默认的，也要保留</strong></p>
<p>新建完issue之后刷新，评论功能就可以使用啦，点击一篇文章进入，底部就会出现评论模块：</p>
<img lazyload src="/images/loading.svg" data-src="/2023/05/11/Gitalk%E8%AF%84%E8%AE%BA%E6%8F%92%E4%BB%B6%E8%B8%A9%E5%9D%91%E6%8C%87%E5%8D%97/10.png" class>]]></content>
      <categories>
        <category>Q&amp;A</category>
      </categories>
      <tags>
        <tag>问题及解决方案</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2023/05/08/hello-world/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Welcome to <a class="link" href="https://hexo.io/">Hexo <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>! This is your very first post. Check <a class="link" href="https://hexo.io/docs/">documentation <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> for more info. If you get any problems when using Hexo, you can find the answer in <a class="link" href="https://hexo.io/docs/troubleshooting.html">troubleshooting <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> or you can ask me on <a class="link" href="https://github.com/hexojs/hexo/issues">GitHub <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link" href="https://hexo.io/docs/writing.html">Writing <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link" href="https://hexo.io/docs/server.html">Server <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link" href="https://hexo.io/docs/generating.html">Generating <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link" href="https://hexo.io/docs/one-command-deployment.html">Deployment <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
  </entry>
  <entry>
    <title>基于ChatGLM的部署实现</title>
    <url>/2023/06/16/%E5%9F%BA%E4%BA%8EChatGLM%E7%9A%84%E9%83%A8%E7%BD%B2%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>ChatGLM-6B 是一个由清华大学KEG实验室和智谱AI基于GLM模型开发的人工智能助手。（参考链接：<a class="link" href="https://github.com/THUDM/ChatGLM-6B">https://github.com/THUDM/ChatGLM-6B <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> ）</p>
<img lazyload src="/images/loading.svg" data-src="/2023/06/16/%E5%9F%BA%E4%BA%8EChatGLM%E7%9A%84%E9%83%A8%E7%BD%B2%E5%AE%9E%E7%8E%B0/1.png" class>

<p>ChatGLM-6B 具有强大的语言处理能力，可以理解用户的问题和要求，并给出相应的答案和建议。<br>同时其作为ChatGPT轻量化的小参数版本，虽然效果上还有些差距，但其可以单卡部署在个人电脑上。<br>官方列出的硬件需求：</p>
<img lazyload src="/images/loading.svg" data-src="/2023/06/16/%E5%9F%BA%E4%BA%8EChatGLM%E7%9A%84%E9%83%A8%E7%BD%B2%E5%AE%9E%E7%8E%B0/2.png" class>

<p>下面就是我记录的部署ChatGLM-6B的过程。</p>
<h3 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h3><ol>
<li>通过git clone下载项目仓库<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/THUDM/ChatGLM-6B</span><br><span class="line"></span><br><span class="line">cd ChatGLM-6B</span><br></pre></td></tr></table></figure></div></li>
<li>新建conda环境<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">conda create -n chatglm python==3.8</span><br></pre></td></tr></table></figure></div>
安装完激活环境<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">conda activate chatglm</span><br></pre></td></tr></table></figure></div></li>
<li>安装torch和cuda<br>这里参考pytorch官网：<a class="link" href="https://pytorch.org/">https://pytorch.org <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 注意torch的版本要高于1.10。<br>我选择使用的conda命令，对应版本如下<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">conda install pytorch==1.10.1 torchvision==0.11.2 torchaudio==0.10.1 cudatoolkit=11.3 -c pytorch -c conda-forge</span><br></pre></td></tr></table></figure></div></li>
<li>安装所需依赖<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure></div></li>
</ol>
<p>至此，基本环境配置完成。</p>
<h3 id="准备模型文件"><a href="#准备模型文件" class="headerlink" title="准备模型文件"></a>准备模型文件</h3><p>下载ChatGLM-6B模型文件，下载链接：<a class="link" href="https://huggingface.co/THUDM/chatglm-6b">https://huggingface.co/THUDM/chatglm-6b <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<img lazyload src="/images/loading.svg" data-src="/2023/06/16/%E5%9F%BA%E4%BA%8EChatGLM%E7%9A%84%E9%83%A8%E7%BD%B2%E5%AE%9E%E7%8E%B0/3.png" class>

<p>下载好的文件放在&#x2F;THUDM&#x2F;chatglm-6b路径下。当然可以修改成自己的路径，之后在执行代码的时候就需要将模型文件的路径修改成自己的。</p>
<h3 id="代码运行demo"><a href="#代码运行demo" class="headerlink" title="代码运行demo"></a>代码运行demo</h3><p>这个没有去尝试，copy自github</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; from transformers import AutoTokenizer, AutoModel</span><br><span class="line">&gt;&gt;&gt; tokenizer = AutoTokenizer.from_pretrained(&quot;THUDM/chatglm-6b&quot;, trust_remote_code=True)</span><br><span class="line">&gt;&gt;&gt; model = AutoModel.from_pretrained(&quot;THUDM/chatglm-6b&quot;, trust_remote_code=True).half().cuda()</span><br><span class="line">&gt;&gt;&gt; model = model.eval()</span><br><span class="line">&gt;&gt;&gt; response, history = model.chat(tokenizer, &quot;你好&quot;, history=[])</span><br><span class="line">&gt;&gt;&gt; print(response)</span><br><span class="line">你好👋!我是人工智能助手 ChatGLM-6B,很高兴见到你,欢迎问我任何问题。</span><br><span class="line">&gt;&gt;&gt; response, history = model.chat(tokenizer, &quot;晚上睡不着应该怎么办&quot;, history=history)</span><br><span class="line">&gt;&gt;&gt; print(response)</span><br><span class="line">晚上睡不着可能会让你感到焦虑或不舒服,但以下是一些可以帮助你入睡的方法:</span><br><span class="line"></span><br><span class="line">1. 制定规律的睡眠时间表:保持规律的睡眠时间表可以帮助你建立健康的睡眠习惯,使你更容易入睡。尽量在每天的相同时间上床,并在同一时间起床。</span><br><span class="line">2. 创造一个舒适的睡眠环境:确保睡眠环境舒适,安静,黑暗且温度适宜。可以使用舒适的床上用品,并保持房间通风。</span><br><span class="line">3. 放松身心:在睡前做些放松的活动,例如泡个热水澡,听些轻柔的音乐,阅读一些有趣的书籍等,有助于缓解紧张和焦虑,使你更容易入睡。</span><br><span class="line">4. 避免饮用含有咖啡因的饮料:咖啡因是一种刺激性物质,会影响你的睡眠质量。尽量避免在睡前饮用含有咖啡因的饮料,例如咖啡,茶和可乐。</span><br><span class="line">5. 避免在床上做与睡眠无关的事情:在床上做些与睡眠无关的事情,例如看电影,玩游戏或工作等,可能会干扰你的睡眠。</span><br><span class="line">6. 尝试呼吸技巧:深呼吸是一种放松技巧,可以帮助你缓解紧张和焦虑,使你更容易入睡。试着慢慢吸气,保持几秒钟,然后缓慢呼气。</span><br><span class="line"></span><br><span class="line">如果这些方法无法帮助你入睡,你可以考虑咨询医生或睡眠专家,寻求进一步的建议。</span><br></pre></td></tr></table></figure></div>

<h3 id="命令行运行demo"><a href="#命令行运行demo" class="headerlink" title="命令行运行demo"></a>命令行运行demo</h3><p>运行仓库中 cli_demo.py文件</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">python cli_demo.py</span><br></pre></td></tr></table></figure></div>
<img lazyload src="/images/loading.svg" data-src="/2023/06/16/%E5%9F%BA%E4%BA%8EChatGLM%E7%9A%84%E9%83%A8%E7%BD%B2%E5%AE%9E%E7%8E%B0/4.png" class>

<p>可以以命令行的形式进行交互。</p>
<h3 id="基于-Gradio-的网页运行demo"><a href="#基于-Gradio-的网页运行demo" class="headerlink" title="基于 Gradio 的网页运行demo"></a>基于 Gradio 的网页运行demo</h3><p>运行仓库中web_demo.py文件即可</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">python web_demo.py</span><br></pre></td></tr></table></figure></div>
<img lazyload src="/images/loading.svg" data-src="/2023/06/16/%E5%9F%BA%E4%BA%8EChatGLM%E7%9A%84%E9%83%A8%E7%BD%B2%E5%AE%9E%E7%8E%B0/5.png" class>

<h3 id="基于-Streamlit-的网页运行Demo"><a href="#基于-Streamlit-的网页运行Demo" class="headerlink" title="基于 Streamlit 的网页运行Demo"></a>基于 Streamlit 的网页运行Demo</h3><p>先安装streamlit依赖</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install streamlit</span><br><span class="line">pip install streamlit-chat</span><br></pre></td></tr></table></figure></div>
<p>streamlit run web_demo2.py –server.port **** (<strong>可用端口号</strong>)</p>
<img lazyload src="/images/loading.svg" data-src="/2023/06/16/%E5%9F%BA%E4%BA%8EChatGLM%E7%9A%84%E9%83%A8%E7%BD%B2%E5%AE%9E%E7%8E%B0/6.png" class>

<p>模型默认情况以 FP16 精度加载，大概需要 14GB 显存。</p>
<img lazyload src="/images/loading.svg" data-src="/2023/06/16/%E5%9F%BA%E4%BA%8EChatGLM%E7%9A%84%E9%83%A8%E7%BD%B2%E5%AE%9E%E7%8E%B0/7.png" class>

<p>如果你的显存资源有限，可以考虑INT4&#x2F;INT8轻量化，具体地：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; model = AutoModel.from_pretrained(&quot;THUDM/chatglm-6b&quot;, trust_remote_code=True).half().quantize(4).cuda()</span><br></pre></td></tr></table></figure></div>
<p>在这里加上.quantize(4)或者.quantize(8)即可。</p>
<p>总体过程大致就是这样。总体来说，ChatGLM不论是生成速度还是生成文本效果来说，都还是挺不错的。感兴趣的也可自己进行尝试。</p>
<p>后续还会有使用自己的数据来进行<strong>微调</strong>的过程，后续再回来补充~</p>
]]></content>
      <categories>
        <category>AI</category>
      </categories>
      <tags>
        <tag>ChatGPT</tag>
      </tags>
  </entry>
</search>
